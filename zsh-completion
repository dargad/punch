#compdef punch

# Zsh completion for the "punch" CLI tool
# Provides completion for subcommands, global options, and dynamic task suggestions for "add".

# Load tasks and categories from Punch data (if available)
local tasks_file=${XDG_DATA_HOME:-$HOME/.local/share}/punch/tasks.txt
local config_file=${XDG_CONFIG_HOME:-$HOME/.config}/punch/punch.yaml

# Prefer Snap paths if they exist
local snap_dir="$HOME/snap/punch/current"
if [[ -f "$snap_dir/.config/punch/punch.yaml" ]]; then
  config_file="$snap_dir/.config/punch/punch.yaml"
fi

if [[ -f "$snap_dir/.local/share/punch/tasks.txt" ]]; then
  tasks_file="$snap_dir/.local/share/punch/tasks.txt"
fi

typeset -a tasks_lines
typeset -A cat_short_codes  # map of category short code -> 1 (used as set of known codes)

if [[ -r $tasks_file ]]; then
  tasks_lines=("${(f)$(<${tasks_file})}")    # read all lines from tasks.txt
  for line in $tasks_lines; do
    # Each task line expected as "shortcode:Task Name"
    if [[ $line =~ ^([A-Za-z0-9]+):(.*) ]]; then
      local code="${match[1]}"
      cat_short_codes[$code]=1
    fi
  done
fi

# Also collect category codes from config (if tasks file is empty or new categories exist)
if [[ -r $config_file ]]; then
  # Extract lines containing "short:" to gather short codes
  while IFS= read -r cfgline; do
    if [[ $cfgline == *short:* ]]; then
      local code="${cfgline##*short:}"        # get content after 'short:'
      code="${code//[[:space:]]/}"            # remove any whitespace
      if [[ -n $code ]]; then
        cat_short_codes[$code]=1
      fi
    fi
  done < $config_file
fi

# Define subcommand names and their descriptions (for first argument completion)
local -a subcommands
subcommands=(
  'start:Mark the start of your day'
  'add:Add a new task entry (category:task)'
  'report:Print a report of your timecards'
  'export:Export timecards to CSV/JSON'
  'login:Log in to Salesforce (store credentials)'
  'submit:Submit timecards to Salesforce'
  'config:Show or edit the current configuration'
  'help:Show this help message'
)

# Global options (available before or after subcommand)
local -a global_opts
global_opts=(
  '(-h --help)'{-h,--help}'[Show help information]'
  '(-v --verbose)'{-v,--verbose}'[Enable verbose output]'
  '(-V --version)'{-V,--version}'[Show the version of the program]'
)

# Now use _arguments to parse the command line context
_arguments -C \
  $global_opts \
  '1: :->cmd' \
  '*:: :->args'

case $state in
  cmd)
    _describe -t commands "punch command" subcommands
    ;;
  args)
    case $words[1] in
      start)
        _arguments $global_opts \
          '-t+[Specify the start time (HH:MM)]:start time:_guard "[0-9]{2}:[0-9]{2}"'
        ;;
      add)
        _arguments $global_opts
        # ...existing add completion logic...
        ;;
      report)
        _arguments $global_opts \
          '--from=-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-f+-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '--to=-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-t+-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"'
        ;;
      export)
        _arguments $global_opts \
          '--format=[Output format]:format:(csv json)' \
          '--output=-[Output file]:filename:_files' \
          '-o+[Output file]:filename:_files' \
          '--from=-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-f+-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '--to=-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-t+-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"'
        ;;
      login)
        _arguments $global_opts
        ;;
      submit)
        _arguments $global_opts \
          '--from=-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-f+-[Start date YYYY-MM-DD]:start date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '--to=-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-t+-[End date YYYY-MM-DD]:end date:_guard "[0-9]{4}-[0-9]{2}-[0-9]{2}"' \
          '-n[Perform a dry run of the submission]' \
          '--dry-run[Perform a dry run of the submission]' \
          '--headed[Run the browser in headed mode]' \
          '-i[Run in interactive mode (implies --headed)]' \
          '--interactive[Run in interactive mode (implies --headed)]' \
          '--sleep=-[Sleep for X seconds after filling out the form]:seconds'
        ;;
      config)
        _arguments $global_opts \
          '1:subcommand:(show edit path set get wizard)' \
          '2:option: ' \
          '3:value: '
        ;;
      help)
        _arguments $global_opts
        ;;
    esac
    ;;
esac